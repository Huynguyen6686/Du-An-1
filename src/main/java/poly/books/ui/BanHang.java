/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.books.ui;

import java.awt.Image;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import poly.books.dao.HoaDonDAO;
import poly.books.dao.SachDAO;
import poly.books.entity.HoaDon;
import poly.books.entity.ISBNScanner;
import poly.books.entity.KhachHang;
import poly.books.entity.PhieuGiamGia;
import poly.books.entity.Sach;
import poly.books.ui.manager.DanhSachKhachHang;
import poly.books.ui.manager.DanhSachSanPham;
import poly.books.util.XAuth;
import poly.books.util.XDate;
import poly.books.util.XJdbc;

/**
 *
 * @author HuyNguyen
 */
public class BanHang extends javax.swing.JPanel {

    private SachDAO sachDAO = new SachDAO();
    private JFrame parentFrame;
    private int maHD = -1;
    private ISBNScanner isbnScanner;

    /**
     * Creates new form BanHangl
     */
    public BanHang() {
        initComponents();
        txtMaHD.setEditable(false);
        txtMaNV.setEditable(false);
        txtNgayLap.setEditable(false);
        txtmaKH.setEditable(false);
        txtTrangThai.setEditable(false);
        if (!java.beans.Beans.isDesignTime()) {
            isbnScanner = new ISBNScanner(lbQuetISBN, this::displayBookByISBN);
            isbnScanner.stopScanning();
        }
        if (parentFrame == null) {
            System.out.println("Chạy trong chế độ thiết kế hoặc không có parent.");
        }

    }

    public void setParentFrame(JFrame parent) {
        this.parentFrame = parent;
    }

    public void stopWebcam() {
        isbnScanner.stopScanning();
    }

    private void displayBookByISBN(String isbn) {
        try {
            Sach sach = sachDAO.findByISBN(isbn);
            if (sach != null) {
                setSelectedSach(sach);
                DanhSachSanPham dialog = new DanhSachSanPham(parentFrame, true, this);
                dialog.setSelectedSach(sach);
                dialog.setVisible(true);
            } else {
                lbQuetISBN.setText("Không tìm thấy sách với ISBN: " + isbn);
            }
        } catch (Exception e) {
            lbQuetISBN.setText("Lỗi: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        QLBanHang = new javax.swing.JPanel();
        TaoHD = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtMaHD = new javax.swing.JTextField();
        txtNgayLap = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtMaPhieu = new javax.swing.JTextField();
        btnTaoHD = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtTrangThai = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtmaKH = new javax.swing.JTextField();
        btnChonKH = new javax.swing.JButton();
        lbQuetISBN = new javax.swing.JLabel();
        btnQuetISBN = new javax.swing.JButton();
        btnDungQuet = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        TTHD = new javax.swing.JPanel();
        lbAnh = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMaSach = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTenSach = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDonGia = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        DanhSachSanPham = new javax.swing.JButton();
        txtThanhTien = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtGiamGia = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtTongTien = new javax.swing.JTextField();
        btnThemSPvaoHD = new javax.swing.JButton();
        spSoLuong = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        rdoTienMat = new javax.swing.JRadioButton();
        rdoTk = new javax.swing.JRadioButton();
        btnThemSP = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSanPham = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(1123, 773));
        setPreferredSize(new java.awt.Dimension(1123, 773));
        setLayout(new java.awt.BorderLayout());

        QLBanHang.setBackground(new java.awt.Color(255, 255, 255));
        QLBanHang.setLayout(new java.awt.BorderLayout());

        TaoHD.setBackground(new java.awt.Color(255, 255, 255));
        TaoHD.setPreferredSize(new java.awt.Dimension(900, 220));

        jLabel9.setText("Mã Hóa đơn:");

        txtNgayLap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgayLapActionPerformed(evt);
            }
        });

        jLabel10.setText("Thời điểm lập:");

        jLabel12.setText("Mã Nhân viên");

        jLabel13.setText("Mã Phiếu GG:");

        btnTaoHD.setText("Tạo Hóa Đơn");
        btnTaoHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoHDActionPerformed(evt);
            }
        });

        jLabel16.setText("Trạng thái:");

        jLabel1.setText("Mã Khách Hàng:");

        btnChonKH.setText("...");
        btnChonKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChonKHActionPerformed(evt);
            }
        });

        lbQuetISBN.setBackground(new java.awt.Color(255, 255, 255));
        lbQuetISBN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbQuetISBN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbQuetISBN.setOpaque(true);

        btnQuetISBN.setText("Quét ISBN");
        btnQuetISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuetISBNActionPerformed(evt);
            }
        });

        btnDungQuet.setText("Dừng quét");
        btnDungQuet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDungQuetActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(0, 144, 193));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Bán Hàng");
        jLabel11.setOpaque(true);

        javax.swing.GroupLayout TaoHDLayout = new javax.swing.GroupLayout(TaoHD);
        TaoHD.setLayout(TaoHDLayout);
        TaoHDLayout.setHorizontalGroup(
            TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TaoHDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TaoHDLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtNgayLap, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                    .addGroup(TaoHDLayout.createSequentialGroup()
                        .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12)
                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel12)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TaoHDLayout.createSequentialGroup()
                        .addComponent(txtmaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChonKH, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(btnTaoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addComponent(lbQuetISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnQuetISBN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDungQuet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TaoHDLayout.setVerticalGroup(
            TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TaoHDLayout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaoHDLayout.createSequentialGroup()
                        .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TaoHDLayout.createSequentialGroup()
                                .addComponent(btnQuetISBN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDungQuet))
                            .addGroup(TaoHDLayout.createSequentialGroup()
                                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel9)
                                        .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel12)
                                        .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtmaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnChonKH)
                                    .addComponent(jLabel13)
                                    .addComponent(txtMaPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnTaoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(TaoHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(txtTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaoHDLayout.createSequentialGroup()
                        .addComponent(lbQuetISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        QLBanHang.add(TaoHD, java.awt.BorderLayout.PAGE_START);

        TTHD.setBackground(new java.awt.Color(255, 255, 255));
        TTHD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin hóa đơn", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        lbAnh.setText("ảnh");
        lbAnh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Mã Sách");

        jLabel3.setText("Tên sách:");

        jLabel4.setText("Số Lượng");

        jLabel5.setText("Đơn giá:");

        DanhSachSanPham.setText("Danh sách sản phẩm");
        DanhSachSanPham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DanhSachSanPhamActionPerformed(evt);
            }
        });

        jLabel6.setText("Thành tiền:");

        jLabel7.setText("Giảm giá:");

        jLabel8.setText("Tổng tiền:");

        btnThemSPvaoHD.setText("Thêm sản phẩm vào hóa đơn");
        btnThemSPvaoHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSPvaoHDActionPerformed(evt);
            }
        });

        jLabel15.setText("Phương thức thanh toán:");

        buttonGroup1.add(rdoTienMat);
        rdoTienMat.setText("Tiền mặt");

        buttonGroup1.add(rdoTk);
        rdoTk.setText("Chuyển khoản");

        btnThemSP.setText("Thêm vào giỏ hàng");
        btnThemSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSPActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Giỏ hàng", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        tbSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã Sách", "Tên Sách", "Số Lượng", "Đơn giá"
            }
        ));
        tbSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbSanPhamMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbSanPham);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout TTHDLayout = new javax.swing.GroupLayout(TTHD);
        TTHD.setLayout(TTHDLayout);
        TTHDLayout.setHorizontalGroup(
            TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TTHDLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TTHDLayout.createSequentialGroup()
                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4))
                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TTHDLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(TTHDLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDonGia)
                                    .addGroup(TTHDLayout.createSequentialGroup()
                                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnThemSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(DanhSachSanPham, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(TTHDLayout.createSequentialGroup()
                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TTHDLayout.createSequentialGroup()
                                .addComponent(lbAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 73, Short.MAX_VALUE))
                            .addComponent(txtMaSach)
                            .addComponent(txtTenSach))))
                .addGap(70, 70, 70)
                .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(TTHDLayout.createSequentialGroup()
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(TTHDLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(TTHDLayout.createSequentialGroup()
                                    .addGap(29, 29, 29)
                                    .addComponent(rdoTk, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnThemSPvaoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(53, 53, 53))))
                        .addGroup(TTHDLayout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(rdoTienMat, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        TTHDLayout.setVerticalGroup(
            TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TTHDLayout.createSequentialGroup()
                .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TTHDLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TTHDLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TTHDLayout.createSequentialGroup()
                                .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(TTHDLayout.createSequentialGroup()
                                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(txtMaSach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(txtTenSach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(spSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(41, 41, 41))
                                    .addComponent(DanhSachSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnThemSP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(TTHDLayout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TTHDLayout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(btnThemSPvaoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(TTHDLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(TTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel15)
                                            .addComponent(rdoTienMat)
                                            .addComponent(rdoTk))))))))
                .addGap(34, 90, Short.MAX_VALUE))
        );

        QLBanHang.add(TTHD, java.awt.BorderLayout.CENTER);

        add(QLBanHang, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTaoHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoHDActionPerformed
        maHD = createHoaDon();
        if (maHD > 0) {
            txtMaHD.setText(String.valueOf(maHD));
            JOptionPane.showMessageDialog(this, "Tạo hóa đơn thành công!");
        } else {
            JOptionPane.showMessageDialog(this, "Lỗi khi tạo hóa đơn!");
        }
    }//GEN-LAST:event_btnTaoHDActionPerformed

    private void btnChonKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChonKHActionPerformed
        DanhSachKhachHang dialog = new DanhSachKhachHang(parentFrame, true, this);
        dialog.setVisible(true); // Hiển thị dialog
    }//GEN-LAST:event_btnChonKHActionPerformed

    private void btnQuetISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuetISBNActionPerformed
        isbnScanner.startScanning();
    }//GEN-LAST:event_btnQuetISBNActionPerformed

    private void btnDungQuetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDungQuetActionPerformed
        isbnScanner.stopScanning();
    }//GEN-LAST:event_btnDungQuetActionPerformed

    private void DanhSachSanPhamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DanhSachSanPhamActionPerformed
        DanhSachSanPham dialog = new DanhSachSanPham(parentFrame, true, this);
        dialog.setVisible(true); // Hiển thị dialog
    }//GEN-LAST:event_DanhSachSanPhamActionPerformed

    private void btnThemSPvaoHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSPvaoHDActionPerformed
        themSPvaoHD();
    }//GEN-LAST:event_btnThemSPvaoHDActionPerformed

    private void btnThemSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSPActionPerformed
        try {
            addToHoaDon();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm sản phẩm vào hóa đơn: " + e.getMessage());
        }
    }//GEN-LAST:event_btnThemSPActionPerformed

    private void txtNgayLapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgayLapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayLapActionPerformed

    private void tbSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSanPhamMouseClicked
        int row = tbSanPham.getSelectedRow();
        if (row == -1 || tbSanPham.getSelectedColumn() != 2 || maHD == -1) {
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tbSanPham.getModel();
        int maSach = Integer.parseInt(model.getValueAt(row, 0).toString());
        int currentQuantity = Integer.parseInt(model.getValueAt(row, 2).toString());

        String input = JOptionPane.showInputDialog(this, "Nhập số lượng mới:", currentQuantity);
        if (input == null) {
            return;
        }

        try {
            int newQuantity = Integer.parseInt(input);
            if (newQuantity < 0) {
                JOptionPane.showMessageDialog(this, "Số lượng không được âm!");
                return;
            }

            // Kiểm tra tồn kho
            String sqlKhoCheck = "SELECT SoLuong FROM Kho WHERE MaSach = ?";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlKhoCheck)) {
                ps.setInt(1, maSach);
                ResultSet rs = ps.executeQuery();
                if (!rs.next() || newQuantity > rs.getInt(1) + currentQuantity) {
                    JOptionPane.showMessageDialog(this, "Số lượng vượt quá tồn kho!");
                    return;
                }
            }

            // Cập nhật bảng
            model.setValueAt(newQuantity, row, 2);

            // Cập nhật ChiTietHoaDon
            String sqlChiTiet = newQuantity == 0 ? "DELETE FROM ChiTietHoaDon WHERE MaHD = ? AND MaSach = ?"
                    : "UPDATE ChiTietHoaDon SET SoLuong = ? WHERE MaHD = ? AND MaSach = ?";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlChiTiet)) {
                if (newQuantity == 0) {
                    ps.setInt(1, maHD);
                    ps.setInt(2, maSach);
                } else {
                    ps.setInt(1, newQuantity);
                    ps.setInt(2, maHD);
                    ps.setInt(3, maSach);
                }
                ps.executeUpdate();
            }

            // Xóa hóa đơn nếu không còn chi tiết
            if (newQuantity == 0) {
                String sqlCheck = "SELECT COUNT(*) FROM ChiTietHoaDon WHERE MaHD = ?";
                try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlCheck)) {
                    ps.setInt(1, maHD);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next() && rs.getInt(1) == 0) {
                        new HoaDonDAO().delete(maHD);
                        clearForm();
                    } else {
                        model.removeRow(row);
                    }
                }
            }

            // Cập nhật Kho
            String sqlKho = "UPDATE Kho SET SoLuong = SoLuong + ? WHERE MaSach = ?";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlKho)) {
                ps.setInt(1, currentQuantity - newQuantity);
                ps.setInt(2, maSach);
                ps.executeUpdate();
            }

            updateGiamGia();
            updateThanhTien();
            calculateTongTien();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số lượng không hợp lệ!");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi cập nhật: " + e.getMessage());
        }

    }//GEN-LAST:event_tbSanPhamMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DanhSachSanPham;
    public javax.swing.JPanel QLBanHang;
    private javax.swing.JPanel TTHD;
    private javax.swing.JPanel TaoHD;
    private javax.swing.JButton btnChonKH;
    private javax.swing.JButton btnDungQuet;
    private javax.swing.JButton btnQuetISBN;
    private javax.swing.JButton btnTaoHD;
    private javax.swing.JButton btnThemSP;
    private javax.swing.JButton btnThemSPvaoHD;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbAnh;
    private javax.swing.JLabel lbQuetISBN;
    private javax.swing.JRadioButton rdoTienMat;
    private javax.swing.JRadioButton rdoTk;
    private javax.swing.JSpinner spSoLuong;
    private javax.swing.JTable tbSanPham;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtGiamGia;
    private javax.swing.JTextField txtMaHD;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JTextField txtMaPhieu;
    private javax.swing.JTextField txtMaSach;
    private javax.swing.JTextField txtNgayLap;
    private javax.swing.JTextField txtTenSach;
    private javax.swing.JTextField txtThanhTien;
    private javax.swing.JTextField txtTongTien;
    private javax.swing.JTextField txtTrangThai;
    private javax.swing.JTextField txtmaKH;
    // End of variables declaration//GEN-END:variables
 public void setSelectedSach(Sach sach) {
        txtMaSach.setText(String.valueOf(sach.getMaSach()));
        txtTenSach.setText(sach.getTenSach());
        txtDonGia.setText(String.valueOf(sach.getGiaBan()));
        spSoLuong.setValue(1);
        lbAnh.setIcon(null);
        lbAnh.setText("");
        if (sach.getHinhAnh() != null && !sach.getHinhAnh().isEmpty()) {
            lbAnh.setToolTipText(sach.getHinhAnh());
            java.net.URL imageUrl = getClass().getResource("/imgSach/" + sach.getHinhAnh());
            if (imageUrl != null) {
                ImageIcon icon = new ImageIcon(imageUrl);
                Image img = icon.getImage().getScaledInstance(lbAnh.getWidth(), lbAnh.getHeight(), Image.SCALE_SMOOTH);
                lbAnh.setIcon(new ImageIcon(img));
            }
        }
        updateThanhTien();
    }

    public void setSelectedKhachHang(KhachHang KH) {
        txtmaKH.setText(String.valueOf(KH.getMaKH()));

    }

    public void setHoaDon(HoaDon hoaDon) {
        maHD = hoaDon.getMaHD();
        txtMaHD.setText(String.valueOf(hoaDon.getMaHD()));
        txtMaNV.setText(hoaDon.getTenDangNhap());
        txtNgayLap.setText(XDate.format(hoaDon.getNgayLap(), "dd-MM-yyyy"));
        txtmaKH.setText(String.valueOf(hoaDon.getMaKH()));
        txtMaPhieu.setText(hoaDon.getMaPhieu() != null ? String.valueOf(hoaDon.getMaPhieu()) : "");
        txtTrangThai.setText(hoaDon.getTrangThai() == 0 ? "Chờ thanh toán" : "Đã thanh toán");
        txtTongTien.setText(String.format("%.2f", hoaDon.getTongTien()));
        rdoTienMat.setSelected(hoaDon.getPhuongThuc() == 1);
        rdoTk.setSelected(hoaDon.getPhuongThuc() == 2);

        // Load chi tiết hóa đơn
        DefaultTableModel model = (DefaultTableModel) tbSanPham.getModel();
        model.setRowCount(0);
        try {
            String sql = "SELECT MaSach, SoLuong, DonGia FROM ChiTietHoaDon WHERE MaHD = ?";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setInt(1, maHD);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    int maSach = rs.getInt("MaSach");
                    int soLuong = rs.getInt("SoLuong");
                    double donGia = rs.getDouble("DonGia");
                    Sach sach = sachDAO.findByID(maSach);
                    if (sach != null) {
                        model.addRow(new Object[]{
                            sach.getMaSach(),
                            sach.getTenSach(),
                            soLuong,
                            donGia
                        });
                    }
                }
            }
            updateGiamGia();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải chi tiết hóa đơn: " + e.getMessage());
        }
    }

    private void themSPvaoHD() {

        if (maHD == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng tạo hóa đơn trước!");
            return;
        }
        if (tbSanPham.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Giỏ hàng trống! Vui lòng thêm sản phẩm.");
            return;
        }

        try {
            double tongTien = calculateTongTien();
            double giamGia = calculateGiamGia(tongTien);
            double tongThanhToan = tongTien - giamGia;

            int phuongThuc = rdoTienMat.isSelected() ? 1 : (rdoTk.isSelected() ? 2 : 1);

            HoaDonDAO dao = new HoaDonDAO();
            HoaDon hoaDon = dao.findById(maHD);

            if (hoaDon != null) {
                hoaDon.setTongTien(tongThanhToan);
                hoaDon.setPhuongThuc(phuongThuc);

                hoaDon.setTrangThai(0);
                hoaDon.setMaPhieu(txtMaPhieu.getText().isEmpty() ? null : Integer.parseInt(txtMaPhieu.getText()));

                dao.update(hoaDon);

                txtTongTien.setText(String.format("%.2f", tongThanhToan));
                txtGiamGia.setText(String.format("%.2f", giamGia));
                txtTrangThai.setText("Chờ thanh toán");

                JOptionPane.showMessageDialog(this, "Thêm thành công!");
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy hóa đơn!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm sản phẩm: " + e.getMessage());
        }
    }

    private void updateThanhTien() {
        try {
            int soLuong = (Integer) spSoLuong.getValue();
            double donGia = txtDonGia.getText().isEmpty() ? 0 : Double.parseDouble(txtDonGia.getText());
            double thanhTien = soLuong * donGia;
            txtThanhTien.setText(String.valueOf(thanhTien));
            updateGiamGia(); // Tự động cập nhật mã giảm giá
        } catch (NumberFormatException e) {
            txtThanhTien.setText("0");
        }
    }

    private double calculateTongTien() {
        DefaultTableModel model = (DefaultTableModel) tbSanPham.getModel();
        double tongTien = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                int soLuong = Integer.parseInt(model.getValueAt(i, 2).toString());
                double donGia = Double.parseDouble(model.getValueAt(i, 3).toString());
                tongTien += soLuong * donGia;
            } catch (Exception e) {
                continue;
            }
        }
        return tongTien; // Không gọi updateGiamGia
    }

    private double calculateGiamGia(double tongTien) {
        try {
            String sql = "SELECT MaPhieu, GiaTri, DieuKienApDung FROM PhieuGiamGia WHERE TrangThai = 1 AND DieuKienApDung <= ?";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setDouble(1, tongTien);
                ResultSet rs = ps.executeQuery();
                int bestMaPhieu = -1;
                double bestGiaTri = 0;
                double minDifference = Double.MAX_VALUE;
                while (rs.next()) {
                    int maPhieu = rs.getInt("MaPhieu");
                    double giaTri = rs.getDouble("GiaTri");
                    int dieuKien = rs.getInt("DieuKienApDung");
                    double difference = Math.abs(tongTien - dieuKien);
                    if (difference < minDifference) {
                        minDifference = difference;
                        bestMaPhieu = maPhieu;
                        bestGiaTri = giaTri;
                    }
                }
                if (bestMaPhieu != -1) {
                    txtMaPhieu.setText(String.valueOf(bestMaPhieu));
                    return bestGiaTri;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tìm mã giảm giá: " + e.getMessage());
        }
        txtMaPhieu.setText("");
        return 0;
    }

    private void addToHoaDon() throws SQLException {
        if (maHD == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng tạo hóa đơn trước!");
            return;
        }

        String maSach = txtMaSach.getText().trim();
        if (maSach.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một sản phẩm!");
            return;
        }

        int maSachInt;
        try {
            maSachInt = Integer.parseInt(maSach);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Mã sách không hợp lệ!");
            return;
        }

        Sach sach = sachDAO.findByID(maSachInt);
        if (sach == null) {
            JOptionPane.showMessageDialog(this, "Sản phẩm không tồn tại!");
            return;
        }

        int soLuong = (Integer) spSoLuong.getValue();
        if (soLuong <= 0) {
            JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        Integer tonKho = null;
        String sqlKhoCheck = "SELECT SoLuong FROM Kho WHERE MaSach = ?";
        try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlKhoCheck)) {
            ps.setInt(1, maSachInt);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                tonKho = rs.getInt(1);
            }
        }
        if (tonKho == null || soLuong > tonKho) {
            JOptionPane.showMessageDialog(this, "Số lượng vượt quá tồn kho (" + (tonKho != null ? tonKho : 0) + ")!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tbSanPham.getModel();
        boolean productExists = false;
        int existingRow = -1;

        // Kiểm tra xem sản phẩm đã có trong bảng chưa
        for (int i = 0; i < model.getRowCount(); i++) {
            Object maSachObj = model.getValueAt(i, 0);
            if (maSachObj != null && Integer.parseInt(maSachObj.toString()) == maSachInt) {
                productExists = true;
                existingRow = i;
                break;
            }
        }

        if (productExists) {
            // Cập nhật số lượng nếu sản phẩm đã tồn tại
            int currentQuantity = Integer.parseInt(model.getValueAt(existingRow, 2).toString());
            int newQuantity = currentQuantity + soLuong;
            if (newQuantity > tonKho) {
                JOptionPane.showMessageDialog(this, "Số lượng vượt quá tồn kho (" + tonKho + ")!");
                return;
            }
            model.setValueAt(newQuantity, existingRow, 2);

            // Cập nhật chi tiết hóa đơn trong cơ sở dữ liệu
            String sqlUpdate = "UPDATE ChiTietHoaDon SET SoLuong = ? WHERE MaHD = ? AND MaSach = ?";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlUpdate)) {
                ps.setInt(1, newQuantity);
                ps.setInt(2, maHD);
                ps.setInt(3, maSachInt);
                ps.executeUpdate();
            }
        } else {
            // Thêm sản phẩm mới vào đầu bảng
            model.insertRow(0, new Object[]{
                sach.getMaSach(),
                sach.getTenSach(),
                soLuong,
                sach.getGiaBan()
            });

            // Thêm chi tiết hóa đơn vào cơ sở dữ liệu
            String sqlInsert = "INSERT INTO ChiTietHoaDon (MaHD, MaSach, SoLuong, DonGia) VALUES (?, ?, ?, ?)";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlInsert)) {
                ps.setInt(1, maHD);
                ps.setInt(2, maSachInt);
                ps.setInt(3, soLuong);
                ps.setDouble(4, sach.getGiaBan());
                ps.executeUpdate();
            }
        }

        // Cập nhật số lượng trong kho
        String sqlKho = "UPDATE Kho SET SoLuong = SoLuong - ? WHERE MaSach = ?";
        try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlKho)) {
            ps.setInt(1, soLuong);
            ps.setInt(2, maSachInt);
            ps.executeUpdate();
        }

        updateGiamGia();
        clear();
    }

    private int createHoaDon() {

        if (XAuth.user == null || XAuth.currentTenDangNhap == null) {
            JOptionPane.showMessageDialog(this, "Người dùng chưa đăng nhập!");
            return -1;
        }

        String maKHText = txtmaKH.getText().trim();
        int maKH;
        if (maKHText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng!");
            return -1;
        }
        try {
            maKH = Integer.parseInt(maKHText);
            String sqlKH = "SELECT MaKH FROM KhachHang WHERE MaKH = ?";
            try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sqlKH)) {
                ps.setInt(1, maKH);
                ResultSet rs = ps.executeQuery();

                if (!rs.next()) {
                    JOptionPane.showMessageDialog(this, "Khách hàng không tồn tại!");
                    return -1;
                }
            }
        } catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Mã khách hàng không hợp lệ!");
            return -1;
        }

        Integer maPhieu = null;
        String maPhieuText = txtMaPhieu.getText().trim();
        if (!maPhieuText.isEmpty()) {
            try {
                maPhieu = Integer.parseInt(maPhieuText);
                String sql = "SELECT MaPhieu FROM PhieuGiamGia WHERE MaPhieu = ? AND TrangThai = 1";
                try (Connection conn = XJdbc.openConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
                    ps.setInt(1, maPhieu);
                    ResultSet rs = ps.executeQuery();
                    if (!rs.next()) {
                        JOptionPane.showMessageDialog(this, "Mã giảm giá không hợp lệ!");
                        return -1;
                    }
                }
            } catch (NumberFormatException | SQLException e) {
                JOptionPane.showMessageDialog(this, "Mã phiếu giảm giá không hợp lệ!");
                return -1;
            }
        }

        HoaDon hoaDon = new HoaDon();
        hoaDon.setMaKH(maKH);
        hoaDon.setTenDangNhap(XAuth.currentTenDangNhap.trim());
        hoaDon.setNgayLap(XDate.now());
        hoaDon.setTongTien(0.0);
        hoaDon.setPhuongThuc(1);
//        hoaDon.setNgayThanhToan(null);
        hoaDon.setTrangThai(0);
        hoaDon.setMaPhieu(maPhieu);

        HoaDonDAO dao = new HoaDonDAO();
        try {
            int newMaHD = dao.create(hoaDon);
            if (newMaHD > 0) {
                maHD = newMaHD;
                txtNgayLap.setText(XDate.format(XDate.now(), "dd-MM-yyyy"));
                txtMaHD.setText(String.valueOf(newMaHD));
                txtMaNV.setText(XAuth.currentTenDangNhap.trim());
                txtTrangThai.setText("Chờ thanh toán");
                updateGiamGia();

                return newMaHD;
            }
            return -1;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi tạo hóa đơn: " + e.getMessage());
            return -1;
        }
    }

    private void updateGiamGia() {
        double tongTien = calculateTongTien();
        double giamGia = calculateGiamGia(tongTien);
        txtGiamGia.setText(String.format("%.2f", giamGia));
        txtTongTien.setText(String.format("%.2f", tongTien - giamGia));
    }

    private void clearForm() {
        txtMaSach.setText("");
        txtTenSach.setText("");
        txtDonGia.setText("");
        spSoLuong.setValue(0);
        txtThanhTien.setText("");
        lbAnh.setIcon(null);
        lbAnh.setText("ảnh");
        txtMaHD.setText("");
        txtMaNV.setText("");
        txtNgayLap.setText("");
        txtmaKH.setText("");
        txtMaPhieu.setText("");
        txtTrangThai.setText("");
        txtTongTien.setText("");
        txtGiamGia.setText("");
        ((DefaultTableModel) tbSanPham.getModel()).setRowCount(0);
        maHD = -1;
    }
     private void clear() {
        txtMaSach.setText("");
        txtTenSach.setText("");
        txtDonGia.setText("");
        spSoLuong.setValue(0);
        lbAnh.setIcon(null);
        lbAnh.setText("ảnh");         
    }

}
